{"pages":[{"url":"pages/tentang/","tags":"pages","title":"Tentang","text":"Hallo, saya andi. Ini blog pribadi saya, konten dari blog ini berfokus kepada hal-hal yang saya pelajari, saya anggap, penting, atau saya rasa ingin untuk di publikasikan dan di dokumentasikannya dan sebagian lainnya merupakan repost dari blog-blog terdahulu saya. Well.... blog sederhana ini isinya dikit karna saya sedang belajar untuk menulis, hitung-hitung dokumentasi pribadi, dan kalo ente gak nemu solasi disini, dari pada cape googling, yahooing, ddging, binging sampe suing mungkin bisa mampir ke blog temen-temen ane ini bray ðŸ˜Ž : bluemeda wanperfeksyot aka ngalim nsetyo afternewbie yogayudistira hahnsaja ahnasution aancw aka petruknisme se7entime si_kabayan aka mimin pegelinux kabar linux sinau dev rezhajulio biawaktamvan arbaunzm muhammad refa sucipto aka showcheap ceroberoz"},{"url":"membuat-halaman-php-info.html","tags":"Programming","title":"Membuat halaman phpinfo","text":"Halaman phpinfo adalah halaman yang menampilkan seluruh informasi dari php modul dan extension , beserta dengan informasi dari webserver yang digunakan. Untuk membuat halaman phpinfo ini maka buatlah file php berikut: <? php phpinfo (); ?> file ini akan menampilkan seluruh info dari php kita beserta modul/extensi dan informasi lainnya. Jika kita hanya ingin mengetahui modul yang terinstall saja maka ubahlah menjadi seperti ini: <? phpinfo ( INFO_MODULES ); lalu simpan dengan nama apa saja, dan letakan di direktori yang dapat diakses oleh web server dan jangan lupa setting permission file. Sekarang akseslah dari browser dengan memasukan http://localhost-atau-alamat-ip/direktori/file-phpinfo . Disini saya menyimpan file tersebut menggunakan nama phpinfo.php , di direktori root html bawaan nginx di freebsd , maka saya membuka di address bar browser http://172.16.10.51/phpinfo.php maka kita akan ditampilkan dengan informasi dari php dan extensi dan module yang terinstall seperti ini:"},{"url":"install-kvm-virt-manager-debian-linux.html","tags":"GNU/Linux","title":"Virtualisasi dengan KVM dan VirtManager di Debian SID GNU/Linux","text":"KVM adalah singkatan dari Kernel-based Virtual Machine , merupakan salah satu arsitektur virtualisasi bersumber terbuka ( Open source ) yang ditanamkan kedalam linux kernel. KVM merupakan virtualisasi penuh yang memanfaatkan extensi virtualisasi pada prosesor X86. Untuk menjalankan module KVM pada distribusi linux kita cukup mengenable extensi virtualisasi dari BIOS dan meload kernel modulenya kvm.ko atau jika kita hanya ingin module spesifik dengan vendor hardware yang kita gunakan yang di load maka untuk intel kvm-intel.ko dan untuk AMD kvm-amd.ko . Alasan saya sendiri lebih memilih qemu/kvm dibanding virtualbox atau vmware adalah selain open source, di virtualbox dan vmware belakangan saya semakin sering menemukan masalah ketika habis melakukan upgrade system. Instalasi Untuk menginstall KVM dan paket yang didukungnya di Debian SID maka kita lakukan dengan cara berikut: $ sudo aptitude install qemu-kvm libvirt-daemon-system libvirt-clients libvirt-dev Secara default KVM hanya mengijinkan root atau superuser yang dapat menjalankan dan mengadministrasi virtual machine , untuk dapat menjalankan dan mengatur virtual machine pada kvm dengan user biasa maka tambahakan user yang kita gunakan groups libvirt dan kvm . $ sudo usesmod - aG kvm user $ sudo usermod - aG libvirt user Untuk manajemen dan administrasi kvm memiliki beberapa opsi, untuk cli di terminal dengan menggunakan virsh atau virtinst / virt install , sedangkan untuk graphical tools kita bisa menggunakan virt manager . Untuk menginstall virt manager ataupun gnome boxes di Debian SID kita cukup menginstallnya sama seperti package lainnya dengan dengan menggunakan apt . $ sudo apt install virt - manager Selain untuk manajemen KVM virt-manager juga dapat digunakan untuk manajemen kontainer seperti LXC atau hypervisor lain seperti XEN Untuk membuat VM baru di virt-manager mudah, semua logo cukup jelas sebagai petunjuk. Gambar diatas menunjukan pembuatan VM baru, dengan beberapa opsi seperti lokasi install media atau impor dari yang sudah ada, arsitektur untuk memilih arsitektur CPU. Lanjut ke langkah selanjutnya akan ada opsi pilihan sumber instalasi dan lokasi tempat virtual disk , default opsi akan mengarah ke /var/lib/libvirt/images yang dapat diubah dengan menambahkan pool baru. Untuk opsi virtul disk format yang didukung sendiri virt-manager support qcow2(default), vmware disk vmdk , virtualbox vdi , raw image, vpc , qcow, cow, cloop, vhdx, dll. Untuk networking secara default hanya ada opsi NAT dan macvtap . Jika ingin menggunakan bridge pada virt-manager maka kita bisa menginstall bridge-utils . Untuk opsi BIOS virt-manager mendukung legacy bios dan UEFI . Virt-Manager juga mtelah mendukung live snapshoot . Selain opsi diatas virt-manager juga masih memiliki banyak opsi lain untuk optimalisasi untuk pengalaman virtualisasi yang lebih nyaman. Sekian"},{"url":"blogging-dengan-static-gen.html","tags":"Misc","title":"Blogging dengan pelican dan github pages","text":"Static website generator alias staticgen semakin hari semakin ramai digunakan sebagai blogging platform, teman-teman saya di grup telegram pegelinux pun kebanyakan blogging menggunakan staticgen ini sebagai blog enginenya, alasan dan platform yang digunakan berbeda-beda demikian juga tempat hostingnya. Ada yang menghostingnya di di github pages, gitlab pages ada pula yang menghostingnya di vps sendiri. Saya sendiri memilih pelican dan untuk tempat hostingnya adalah github pages. Alasan saya sendiri menggunakan pelican di github pages adalah untuk hemat dan belajar. Pelican adalah static site generator yang dibuat menggunakan python yang support markdwon dan reStructuredText untuk penulisannya, sedangkan untuk pembuatan themanya menggunakan jinja2 template. Pelican dapat berjalan di python 2 maupun 3. Untuk menginstall pelican dapat diinstall dengan beberapa cara, paling mudah adalah dengan menggunakan manajer pemaketan atau package manager di distribusi linux, atau menggunakan python-pip . Disini saya menggunakan arch-linux, untuk mengisntall pelican menggunakan package manager maka kita dapat dengan mudah menginstallnya melalui pacman seperti menginstall package lainnya. Untuk menginstall pelican dan markdown di arch cukup melakukan seperti ini: # pacman -S pelican python-markdown atau jika kita mau mendapatkan paket yang bleeding-edge dari git maka kita bisa menginstall melalui AUR $ yaourt - S pelican - git Untuk menginstall dengan python-pip maka lakukan cara berikut: pip install pelican markdown Selain cara diatas pelican juga dapat diinstall secara local menggunakan pip didalam virtualenv : $ virtualenv ~/ direktori / pelican $ cd ~/ direktori / pelican source bin / activate pip install pelican markdown Setelah semua paket terinstall maka kita dapat dengan mudah memulai membuat proyek pelican dengan menjalankan perintah pelican-quickstart yang kemudian kita akan dilanjutkan dengan beberapa pertanyaan seperti direktori tempat mengintsallnya, author dan lain-lain seperti berikut ini: / home / user / pelican $ pelican-quickstart Where do you want to create your new web site ? [.] What will be the title of this web site ? > pelican blogs Who will be the author of this web site ? > andy What will be the default language of this web site ? [ en ] Do you want to specify a URL prefix ? e . g ., http :// example . com ( Y / n ) > Y What is your URL prefix ? ( see above example ; no trailing slash ) > http :// andyzs . github . io Do you want to enable article pagination ? ( Y / n ) > y How many articles per page do you want ? [ 10 ] Do you want to generate a Fabfile / Makefile to automate generation and publishing ? ( Y / n ) > y Do you want an auto-reload & simpleHTTP script to assist with theme and site development ? ( Y / n ) > y Do you want to upload your website using FTP ? ( y / N ) > n Do you want to upload your website using SSH ? ( y / N ) > n Do you want to upload your website using Dropbox ? ( y / N ) > n Do you want to upload your website using S3 ? ( y / N ) > n Do you want to upload your website using Rackspace Cloud Files ? ( y / N ) > n Setelah semua pertanyaan diatas selesai terjawab maka proyek pelican kita siap diisi konten, jika kita menjalankan perintah tree didalam direktori proyek pelican kita, maka kita akan melihat ini : $ tree â”œâ”€â”€ Makefile â”œâ”€â”€ content â”œâ”€â”€ develop_server . sh â”œâ”€â”€ fabfile . py â”œâ”€â”€ output â”œâ”€â”€ pelicanconf . py â””â”€â”€ publishconf . py Penjelasan singkat : * content: direktori tempat artikel berformat markdown atau reStructuredText ditulis, untuk membuat halaman seperti tentang, privasi dan lain-lain ataupun direktori tempat menyimpan image dapat dibuat dengan membuat direktori baru didalam direktori konten ini. Contoh $ mkdir content / pages $ mkdir content / images output adalah direktori tempat pelican meletakan file yang di konversi dari markdown format kebentuk HTML secara default pelicanconf.py file konfigurasi pelican di file ini sebagian besar setting di letakan seperti THEME, PATH, TIMEZONE dll publishconf.py file konfigurasi untuk publikasi, didalamnya terdapat line from pelicanconf import * yang berarti file ini akan mengimpor settingan dari pelicanconf.py juga, settingan yang tidak perlu untuk development seperti analytics dan comment system seperti disqus diletakan di file ini. Makefile seperti file makefile pada umumnya, berisi perintah dan deklarasi yang dapat di lakukan dengan make command . develop_server.sh adalah script untuk menjalankan built-in server untuk lokal development . Buatlah postingan pertama kita dan save dalam format .mkd , .md atau .rst didalam direktori content , setelah selesai maka jalankan perintah: $ make html : Untuk mengecek hasil blog pelican kita sebelum di publish ke Github Pages maka kita bisa menjalankan $ make devserver Setelah kita merasa blog sudah siap untuk di publikasikan maka buatlah github pages selanjutnya ubah settingan di publishconf.py : dari DELETE_OUTPUT_DIRECTORY = True menjadi DELETE_OUTPUT_DIRECTORY = False Setelah itu jalankan perintah make publish , selanjutnya untuk mempublish blog kita ke github pages maka lakukan seperti berikut: $ cd output $ git init $ git remote add origin https : //github.com/username/username.github.io.git $ git add -- all $ git commit - m \"commit message\" $ git push origin master Yup dengan demikian blog pelican kita sudah terhosting di github pages dan bisa diakses, untuk custom domain, custom 404 make bisa membaca referensi disini: https://help.github.com/articles/using-a-custom-domain-with-github-pages/ https://www.google.com/search?q=github+custom+404&ie=utf-8&oe=utf-8 Segitu dulu deh postingannya kali ini ðŸ˜…ðŸ˜…ðŸ˜…"},{"url":"Perintah dasar pada MySQL dan MariaDB CLI.html","tags":"Misc","title":"Perintah atau command dasar pada MySQL dan MariaDB","text":"Cukup banyak tool ber-GUI yang mempermudah dalam penggunaan MySQL/Mariadb modelnya pun cukup beragam dari yang web based seperti phpMyAdmin sampai desktop aplikasi seperti mysql workbench. Pada tulisan kali ini saya merangkum beberapa perintah-perintah dasar yang wajib diketahui, atau kalau perlu dihapal untuk penggunaan MySQL/Mariadb via CLI. Karena perintah ini sudah bisa mewakili beberapa hal dasar dalam pengaturan peladen (server). Berikut perintah-perintahnya: Login/Logout MySQL/Mariadb $ sudo mysql -u root -p'password' Untuk keluar dari Maridb/MySQL ketik quit atau \\q . Menampilkan Seluruh Isi Database show databases; Menampilkan Seluruh User SELECT User FROM mysql.user; Membuat Database create database nama_database; Membuat User Baru create user nama_pengguna@localhost identified by 'passwordAnda'; Mengganti Password User SET PASSWORD FOR 'user'@'localhost' = PASSWORD('isi_password_baru'); FLUSH PRIVILEGES; Memberi Hak Pada User grant all privileges on nama_database.* to user@localhost; flush privileges; Menghapus User DROP USER 'user'@'localhost'; Menghapus Database truncate nama_database; drop database nama_database; NB : Truncate untuk menghapus seluruh table dalam database Anda, jika tidak ada table bisa langsung drop. Backup MySQL/Mariadb $ sudo mysqldump -u root -p'password' nama_database > database_backup.sql Restore Database $ sudo mysql -u root -p'password' Lalu ketik: use nama_database; source /direktori/database/berformat.sql; Atau dapat menggunaka one line command atau perintah sebaris $ sudo mysqldump -u root -p'password' nama_database < database_backup.sql Segitu dulu tutorialnya, semoga bermanfaat :) Credit : situsali mysql doc"},{"url":"menjalankan multi akun dengan telegram desktop.html","tags":"Misc","title":"Menjalankan Telegram Desktop dengan Multi Akun di Komputer","text":"Telegram merupakan aplikasi perpesanan instan yang cukup populer digunakan. Keunggulan Telegram terletak pada chat berbasis awan (cloud-based). Dengan demikian, kita dapat merasakan Telegram dapat digunakan banyak perangkat (multi-device) tanpa kehilangan chat. Karena chat tersinkronisasi dari Telegram client ke server. Sebagian dari kita mungkin ada yang butuh menggunakan banyak akun Telegram. Alasanya beragam, entah itu untuk memisahkan akun khusus bisnis atau kantor dengan akun personal. Atau hanya sekadar ingin membuat untuk dimasukan dalam grup / channel, dan lain sebagainya. Intinya, penggunaan multi akun ini sebetulnya memang diperlukan. Saya sendiri termasuk pengguna multi akun di Telegram. Saya buat akun yang satu hanya untuk testing bot saja. Karena penggunaan multi akun ini diperlukan, maka tulisan ini hadir. Sesuai judul batasannya hanya pada pengguna Komputer (desktop client). Untuk mengguna perangkat lain mungkin menyusul pada artikel selanjutnya.ðŸ˜€ Triknya sih mudah, cukup jalankan perintah berikut di Terminal (NB: Khusus Pengguna GNU/Linux, BSD varian dan MacOS): cd /path/telegram/Anda ./Telegram -many -workdir=~/Telegram/Cloning Jika ingin lebih mudah lagi, maka kita dapat membuat launchernya, agar kita dapat mengaksesnya secara mudah dari desktop. caranya sebagai berikut: nano ~/. local / share / applications / telegramcloning . desktop lalu masukan kode berikut: [ Desktop Entry ] Encoding = UTF - 8 Version = 1.0 Name = Telegram Cloning Comment = Official desktop version of Telegram messaging app Exec =/ path / telegram / Anda / Telegram - many - workdir / path / telegram / kloningAnda Icon = telegram Terminal = false StartupWMClass = Telegram Type = Application Categories = Network ; MimeType = x - scheme - handler / tg ; X - Desktop - File - Install - Version = 0.22 Perhatikan perintah Exec di baris ke-6, pastikan direktorinya disesuaikan dengan direktori di mana Anda memasang Telegram. Exec =/ path / telegram / Anda / Telegram - many - workdir / path / telegram / kloningAnda Jika semua benar maka nanti icon telegram desktop yang baru akan muncul di launcher DE kita. Yap, mudah bukan? Sekarang anda sudah dapat menjalankan multi telegram akun untuk berbagai keperluan atau sekedar have fun beralterego ðŸ˜œ Note: Saya hanya mempraktekan cara ini di Debian GNU/Linux , tapi harusnya di system *Nix lainnya pun bisa dilakukan hal yg sama, demikian juga di Windows caranya juga hampir sama tinggal Anda buat shortcut lalu ganti perintahnya. Sekian ~~~ Credit: SitusAli kabayankabayan"},{"url":"Install-apache-mysql-php-freebsd.html","tags":"FreeBSD","title":"Install dan Konfigurasi Apache, MySQL, PHP7 dan Wordpress di FreeBSD 11 Server","text":"Pada tutorial ini saya akan membahas cara membangun web server untuk aplikasi php(kita akan menggunakan CMS Wordpress) pada FreeBSD 11 dengan FAMP(FreeBSD, Apache, MariaDB dan Php) stack di FreeBSD server 11.0 setup yang akan kita buat adalah: FreeBSD 11.0-RELEASE amd64 Apache24-2.4.25.1 PHP70-7.0.14 mod_php70-7.0.14 php70-extensions-1.1 MariaDB-100-server WordPress 4.X Pertama-tama sebelum melakukan instalasi kita akan memastikan system dan ports tree kita sudah terupdate semua. % sudo freebsd-update fetch && sudo freebsd-update install lalu update ports tree % sudo portsnap fetch update Selanjutnya kita akan memulai untuk menginstall dan mengkonfigurasi setup kita untuk membangun web server untuk aplikasi CMS wordpress kita. Selanjutnya seluruh proses yang akan kita lakukan dijalankan dengan menggunakan root privileges. Install Apache Pertama kita akan menginstall dan melakukan konfigurasi pada apache server. Untuk menignstall apache24 server kita dapat menggunakan ports tree atau pkg untuk menginstall menggunakan ports tree maka jalankan perintah berikut: # cd /usr/ports/www/apache24 # make config-recursive install distclean Jika kita ingin menginstall binary packet untuk mempercepat proses installasi tanpa perlu melakukan compile maka kita dapat melakukan dengan menggunakan pkg # pkg install apache24 Selanjutnya setelah apache telah terinstall, maka kita bisa menjalankannya dan membuat service apache otomatis berjalan saat system boot dengan cara berikut: # sysrc apache24_enable=YES && service apache24 start Jika tidak mau apache berjalan otomatis saat boot maka kita dapat menjalankannya dengan: # service apache24 onestart Untuk mengetest apakah apache / httpd server telah berjalan dengan normal kita dapat membuka browser dan memasukan alamat ip kita untuk mengeceknya, maka kita akan mendapatkan tulisan \"It works!\" di browser pertanda jika apache sudah terinstall dan berjalan dengan normal. Install MariaDB MariaDB adalah forkingan atau pengembangan dari mysql yang dibuat oleh komunitas dari source code mysql. Selanjutnya kita akan menginstall MariaDB Server dan Client sebagai database kita. Untuk menginstall MariaDB server melalui port, lakukan dengan cara berikut: cd /usr/ports/databases/mariadb100-server && make config-recursive install distclean selanjutnya kita juga akan install mariadb-client cd /usr/ports/database/mariadb100-client && make config-recursive install distclean Jika ingin mengisntall binary packet melalui pkg pkg install mariadb100-server mariadb100-client Selanjutnya enable mysql-server di /etc/rc.conf agar mysql daemon dapat berjalan otomatis saat system booting dan jalankan service mysql. sysrc mysql_enable=YES && service mysql-server start Selanjutnya kita akan menjalankan mysql dan menyetting password root untuk mysql(mariadb)-server mysql_secure_installation Nanti mysql akan menanyakan password root maka ketik enter saja karna kita belum menyettingnya, kemudian setting password mysql kita dan ada beberapa pertanyaan lagi yang akan ditampilkan mysql shell seperti Disable root login remotely , Remove test database , Remove privileges table Remove anonymous user jawab saja semua pertanyaan tersebut dengan Y . Selanjutnya coba masuk ke mysql shell maka kita dapat lakukan dengan command berikut: mysql -u root -p jika sukses maka mysql telah sukses terinstall dengan benar. untuk keluar dari mysql shell lakukan dengan perintah: quit Install PHP Selanjutnya kita akan menginstall php berserta extensi dan modphp yang dibutuhkan Untuk menginstall melalui port maka lakukan dengan perintah berikut: cd /usr/ports/etc/lang/php70 make config-recursive install distclean lalu kita akan install php extensi cd /usr/ports/lang/php70-extension/ make config-recursive lalu pilih extensi sesuai yang diperlukan untuk diinstall, dan pada tutorial ini karna kita menggunakan mysql, maka jangan lupa memilih extensi MYSQLi agar php dapat berkomunikasi dengan MaraiDB database yang telah kita install. Selanjutnya install make install distclean Install modphp, yaitu module yang dibutuhkan php untuk apache seperti berikut: cd /usr/ports/www/mod_php70 make config-recursive install distclean Sedangkan Untuk mengsintall php dan module serta extensi melalui pkg : pkg install php70 php70-opcache php70-mysqli mod_php70 (Opsional) PHPmyadmin Langkah ini adalah opsional, jika hanya ingin menginstall web server untuk menjalankan php aplikasi maka sebenarnya tidak perlu menginstall ini, karna kita dapat mengatur mysql/mariadb dari command line saja, tapi untuk mempermudah mengatur proses maka saya mengistall phpmyadmin. phpMyAdmin sendiri adalah tools yang dapat digunakan untuk melakukan administrasi dari Mysql berbasis web, agar kita dapat lebih mudah untuk menangani administrasi dari databasenya. Untuk mengisntallnya dengan ports : cd /usr/ports/databases/phpmyadmin make config-recursive install distclean Melalui pkg : pkg install phpMyAdmin Selanjutnya kita akan melakukan konfigurasi dari paket-paket yang telah terinstall tadi Konfigurasi Pertama kita akan membuat file config php. Cara termudah membuat file ini adalah dengan mengcopy sample file config yang telah disediakan oleh php. File sampe config yang disediakan oleh php sendiri ada 2, yakni untuk production dan untuk development/pengembangan. Pada contoh ini kita akan menggunakan file config untuk development. cp /usr/local/etc/php.ini-development /usr/local/etc/php.ini Selanjutnya kita akan mengkonfigurasi apache dan menyesuaikan dengan kebutuhan kita sebagai berikut: edit /usr/local/etc/apache24/httpd.conf lalu kita akan mencari baris `DirectoryIndex dan mengganti dari semula DirectoryIndex index . html ubahlah menjadi DirectoryIndex index . html index . htm index . php lalu tambahkan lah baris berikut ke ahir file config, jika tidak menginstall phpMyAdmin maka tinggalkan baris # phpmyadmin config line : <FilesMatch \"\\.php$\"> SetHandler application/x-httpd-php </FilesMatch> <FilesMatch \"\\.phps$\"> SetHandler application/x-httpd-php-source </FilesMatch> # phpmyadmin config line Alias /phpmyadmin \"/usr/local/www/phpMyAdmin\" <Directory \"/usr/local/www/phpMyAdmin\"> Options None AllowOverride None Require all granted </Directory> Selanjutnya restart service apache24 service apache24 restart Selanjutnya untuk database dari wordpress kita, maka kita akan membuat database pada mysql. Pertama kita akan mengkonfigurasi phpMyAdmin, bagi yang tidak ingin menginstall php myadmin dan ingin mengatur database pada mysql melalui cli, maka dapat melewatkan bagian ini. # Konfigurasi phpMyAdmin Pertama kita akan membuat file untuk menyimpan konfigurasi phpMyAdmin. Tidak seperti dulu dimana kita harus membuat file konfig ini manual atau mengedit default file /usr/local/www/phpMyAdmin/config.inc.php , sekarang phpMyAdmin sudah menyertakan setup script untuk mempermudah pembuatan file config ini. Dimulai dengan membuat direktori tempat file config ini dan membuatnya direktori itu writeable oleh phpMyAdmin setup script . mkdir /usr/local/www/phpMyAdmin/config && chmod o+w /usr/local/www/phpMyAdmin/config lalu ubah permission agar file /usr/local/www/phpMyAdmin/config.inc.php terbaca oleh phpMyAdmin setup script : chmod o+r /usr/local/www/phpMyAdmin/config.inc.php Sekarang bukalah dari web browser dengan memasukan http://ip-address-atau-domain-atau-localhost/phpmyadmin/setup maka anda akan melihat halaman setup dari phpMyAdmin. Pilih lah \"New Server\" dan pilih \"Authentication\" tab. Pilih lah opsi \"http\" dari opsi drop list \"Authentication type\" (Menggunakan Http-Auth untuk masuk ke phpMyAdmin akan mencegah menyimpan password/login info secara langsung ke config.inc.php ), kemudian hapuslah user 'root' dari \"User for config auth\". Sekarang selesaikan setup dengan mengapply dan kita akan di kembalikan ke overview page, diaman kita akan melihat new server di daftar. Lalu pilih lah \"save\" untuk menyimpan konfigurasi kita tersimpan di config.inc.php . Selanjutnya kita akan memindahkan file config dari phpMyAdmin naik satu direktori agar phpMyAdmin dapat membaca file config tersebut. mv /usr/local/www/phpMyAdmin/config/config.inc.php /usr/local/www/phpMyAdmin Sekarang kita dapat mencoba kembali mengakses phpMyAdmin dengan memasukan di web browser *http://localhost-atau-alamat-ip-atau-domain/phpmyadmin, dan kita akan ditampilkan dengan halaman login page phpMyAdmin sekarang dan dapat mencoba memulai login dan membuat database. Karna sekarang direktori config di /usr/local/www/phpMyAdmin sudah kosong kita dapat menghapusnya. Dan juga kita akan merubah file permission dari config.php.ini . rm -r /usr/local/www/phpMyAdmin/config chmod o-r /usr/local/www/phpMyAdmin/config.inc.php Selanjutnya kita membuat database untuk aplikasi CMS wordpress kita: Jika mengintsall phpmyadmin maka kita dengan mudah dapat membuat database melalui browser dengan login ke phpMyAdmin dan buatlah database dengan mengarahkan ke tab Databases lalu buat database baru isi nama database di kolom kosong dan di kolom drop list collation bisa dipilih sesuai dengan collation yang diinginkan, saya disini memilih opsi utf8_unicode_ci . Jika ingin membuat database melalui mysql shell maka lakukan langkah berikut: mysql -u root -p lalu setelah masuk kedalam mysql shell buatlah database, user dan beri permission user kepada database tersebut. > CREATE DATABASE wordpress; > CREATE USER `wordpress user` IDENTIFIED BY 'mypass'; > GRANT ALL PRIVILEGES ON wordpress.* TO `wordpress user` IDENTIFIED BY 'mypass'; > FLUSH PRIVILEGES; > quit # Install dan konfig wordpress Kita akan mendownload wordpress, dan mengestraknya di direktori apache dimana kita akan meletakan data2 web aplikasi kita cd /usr/local/www/apache24/data wget https://wordpress.org/latest.tar.gz tar -xf latest.tar.gz cd wordpress didalam direktory wordpress file yang akan menangani pengaturan konfigurasi ada di wp-config.php . Cara termudah untuk membuat ini adalah dengan mengcopy wp-config-sample.php cp wp-config-sample.php wp-config.php Setelah di copy maka buka lah file tersebut menggunakan text editor, hal yang paling penting untuk dirubah adalah mysql settig, sesuaikan dengan database untuk wordpress kita Carilah baris berikut: /** The name of the database for WordPress */ define('DB_NAME', 'wordpress'); /** MySQL database username */ define('DB_USER', 'wordpres user'); /** MySQL database password */ define('DB_PASSWORD', 'mypass'); Opsional untuk keamanan anda juga bisa memasukan settingan unique key dan salt. Setelah selseai maka selanjutnya restart service apache24 dan mysql service apache24 restart && service mysql-server restart Selanjutnya jalankan wordpess setup dari browser dengan mengarahkan ke http://localhost-atau-ip-address-atau-domain/wordpress/wp-admin/install.php maka kita akan ditampilkan ke halaman installasi wordpress dimana kita akan diminta memasukan info-info yang dibutuhkan seperti judul website, user dan password dari admin untuk wordpress kita. Berikut adalah tampilah homepage dari wp di Freebsd dnegan apache, php70 dan mariadb milik saya: Yap demikian lah tutorial yang cukup panjang ini tentang cara menginstall FAMP server dan wordpress (opsional phpmyadmin) di FreeBSD 11.0-RELEASE server. Referensi: Iceflatline wiki freebsd"},{"url":"Install-hiawatha-mysql-php-on-freebsd.html","tags":"FreeBSD","title":"Install Hiawatha, php70-fpm FreeBSD 11.0-RELEASE","text":"Hiawatha adalah webserver ringan yang mengedepankan fitur keamanan atau securitynya, mungkin hiawatha tidak memiliki fitur sebanyak apache ataupun kecepatan seperti nginx tapi hiawtaha dengan ukurannya yang kecil dan fitur keamanan lebih yang ditawarkannya dapat dijadikan sebagai alternatif webserver gratis selain apache dan ngninx. Hiawatha adalah software crossplatform dan dapat dijalankan dihampir semua unix-like OS, dan sistem operasi FreeBSD dan dapat dengan mudah diinstall melalui ports tree ataupun package manager. Pada tutorial kali ini kita akan membahas konfigurasi dan langkah step-by-step cara menginstall hiawatha mariadb php-fpm di freebsd ~~10.1~~ 11.0 Note: Seluruh instruksi penginstallan dilakukan dengan akun superuser atau root. Install Hiawatha Pindah menuju direktori ports Hiawatha Untuk memulai menginstall # cd /usr/ports/www/hiawatha && make install distclean biarkan opsi default atau jika ingin menggunakan hiawatha monitoring dan tomahawk (Hiawatha Command Shell). Untuk menginstall binary dari pkg maka: # pkg install hiawatha Setelah terinstall maka tambahkan hiawatha ke /etc/rc.conf baru jalankan servicenya: # sysrc hiawatha_enable=YES # service hiawatha start Ceklah dari browser dengan mengarahkan ke `http://alamat-ip/localhost/nama-domain, jika sukses terinstall maka kita akan melihat halaman default dari hiawatha seperti ini: Install Php70 Selanjutnya setelah sukses menginstall hiawatha kita akan menginstall php70 beserta modul dan ekstensi yang kita inginkan. Untuk menginstall paket php melalui ports tree maka pindah ke direktorinya dan install seperti ini: # cd /usr/ports/lang/php70 # make config-recursive install distclean Untuk menginstall modul seperti php-mysql, php-gd dan lainnya pindah menuju direktori php-extension yang dituju dan install seperti berikut: # cd /usr/ports/lang/php70-extension/ # make config-recursive install distclean Jika ingin menginstall paket binary melalui pkg maka: # pkg install php70 php70-opcache php70-mysqli Selanjutnya kita akan membuat file php.ini , yang akan menjadi file konfigurasi untuk php. Cara termudah untuk melakukannya adalah dengan mengcopy dari file sample yang disertakan saat instalasi. Php sendiri menyertakan 2 buah file config sample yang ditujukan sebagai referensi yaitu production dan development. Dicontoh ini kita akan menggunakan php.ini-development. # cp /usr/local/etc/php.ini-development /usr/local/etc/php.ini Selanjutnya edit file /usr/local/etc/php.ini lalu temukan baris cgi.fix_pathinfo , lalu temukan baris berikut: ; cgi . fix_pathinfo = 1 dan ubah menjadi seperti ini: cgi . fix_pathinfo = 0 Lalu kita juga akan merubah beberapa settingan php-fpm seperti listen string kita akan merubahnya dari tcp ke unix socket dan juga listen permissionnya. # edit /usr/local/etc/php-fpm.d/www.conf lalu cari baris **listen = 127.0.0.1:9000** dan ubah menjadi: listen = / var / run / php - fpm . sock kemudian uncoment line berikutnya dibagian permission dan ubah agar menjadi seperti ini: ** listen . owner = www ** ** listen . group = www ** ** listen . mode = 0660 ** Selesai lalu simpan dan keluar. Jika ingin melakukan perubahan lebih jauh maka silahkan melakukan explorasi dengan membaca refrensi di http://php.net/ . Setelah itu tambahkan php-fppm ke file rc.conf dan jalankan php fpm # sysrc php_fpm_enable=YES && service php-fpm start Selanjutnya setelah merubah konfigurasi php maka kita akan mengubah beberapa settingan pada file konfigurasi hiawatha dan menyesuaikannya. # edit /usr/local/etc/hiawatha/hiawatha.conf lalu cari baris CGIhandler dan ubahlah baris berikut: CGIhandler = / usr / local / bin / php - cgi : php menjadi seperti ini: CGIhandler = / usr / local / bin / php - cgi : php , php7 Selanjutnya dibagian FastCGI ubah dari FastCGIserver { FastCGIid = PHP5 ConnectTo = 127.0.0.1 : 2005 Extension = php } dan ubahlah menjadi: FastCGIserver { FastCGIid = PHP5 ConnectTo = 127.0.0.1 : 2005 Extension = php } Untuk settingan lebih lanjut bisa direfernsikan ke manual pages hiawatha : Ini adalah contoh dari file hiawatha.conf saya: # Hiawatha main configuration file # # VARIABLES # With 'set' , you can declare a variable . Make sure the name of the # variable doesn 't conflict with any of the configuration options. # The variables are case-sensitive and cannot be redeclared. # #set LOCALHOST = 127.0.0.0/8 # GENERAL SETTINGS # ServerId = www ConnectionsTotal = 500 # Jumlah koneksi total disaat yang bersamaan, hampir sama dengan nginx ## worker_connection default 150 ConnectionsPerIP = 25 # Jumlah koneksi perIP sama, kurang lebih seperti ngx_http_limit_conn_module ## default 25 SystemLogfile = /var/log/hiawatha/system.log # log file hiawatha GarbageLogfile = /var/log/hiawatha/garbage.log #Logfile seluruh http request yang salah ExploitLogFie #Logfile seluruh exploit attempt yang diterima server seperti SQLinjection, CSRF, ## XSS, dll # BINDING SETTINGS # A binding is where a client can connect to. # Binding { Port = 80 Interface = 172.16.10.51 MaxKeepAlive = 50 TimeForRequest = 10,45 MaxRequestsize = 1024 MaxUploadSize = 10 } # #Binding { # Port = 443 # TLScertFile = ssl/hiawatha.pem # Interface = 127.0.0.1 # MaxRequestSize = 2048 # TimeForRequest = 30 #} # BANNING SETTINGS # Deny service to clients who misbehave. # #BanOnGarbage = 300 #BanOnMaxPerIP = 60 #BanOnMaxReqSize = 300 #KickOnBan = yes #RebanDuringBan = yes # COMMON GATEWAY INTERFACE (CGI) SETTINGS # These settings can be used to run CGI applications. # #CGIhandler = /usr/local/bin/perl:pl CGIhandler = /usr/local/bin/php-cgi:php #CGIhandler = /usr/local/bin/python:py #CGIhandler = /usr/local/bin/ruby:rb #CGIhandler = /usr/local/bin/ssi-cgi:shtml #CGIextension = cgi # FastCGIserver { FastCGIid = PHP7 ConnectTo = /var/run/php-fpm.sock Extension = php } # URL TOOLKIT # **URL Rewrite Rules** # This URL toolkit rule was made for the Banshee PHP framework, # which can be downloaded from http://www.banshee-php.org/ # #UrlToolkit { # ToolkitID = banshee # RequestURI isfile Return # Match &#94;/(css|files|fonts|images|js)($|/) Return # Match &#94;/(favicon.ico|robots.txt)$ Return # Match [&#94;?]*(\\?.*)? Rewrite /index.php$1 #} # DIRECTORY SETTINGS # You can specify some settings per directory. # #Directory { # DirectoryID = static # Path = /css, /fonts, /images, /js # ExpirePeriod = 2 weeks #} # #Directory { # DirectoryID = files # Path = /files # ShowIndex = yes # StartFile = index.html # ExecuteCGI = no #} # DEFAULT WEBSITE # It is wise to use your IP address as the hostname of the default website # and give it a blank webpage. By doing so, automated webscanners won' t find # your possible vulnerable website . # Hostname = 172 . 16 . 10 . 51 WebsiteRoot = / usr / local / www / hiawatha StartFile = index . php index . htm index . html AccessLogfile = / var / log / hiawatha / access . log ErrorLogfile = / var / log / hiawatha / error . log ExecuteCGI = yes # VIRTUAL HOSTS # Use a VirtualHost section for each website you want to host . # # VirtualHost { # Hostname = www.my-domain.com # WebsiteRoot = /var/www/my-domain/public # AccessLogfile = /var/www/my-domain/log/access.log # ErrorLogfile = /var/www/my-domain/log/error.log # TimeForCGI = 5 # UseFastCGI = PHP5 # UseToolkit = banshee # UseDirectory = static, files # } Selanjutnya test untuk melihat apakah php berhasil terpasang dengan benar maka kita akan membuat file php.info di /usr/local/www/hiawatha/phpinfo.php <? php phpinfo (); ?> Kemudian ubah restart servcie hiawatha dan php-fpm service hiawatha restart && service php - fpm restart Sekarang bukalah browser dan ketikan `http://alamat-ip-ataudomain/phpinfo.php maka kita akan mendapatkan halaman informasi tentang php yang kita install beserta modul yang disupport Instalasi MariaDB Selanjutnya install mariadb untuk database # cd /usr/ports/databases/mariadb100-server && make config-recursive install distclean atau jika menggunakan pkg # pkg install mariadb100-server Selanjutnya tambahkan enable service untuk mysql-server di /etc/rc.conf dan jalankan servicenya: # sysrc mysql_enable=YES # service mysql-server start Ok sekian dengan begitu kita telah berhasi menginstall Hiawatha, PHP70 dan MariaDB di FreeBSD 11.0-Release. Sekarang Web Server, database dan php-fpm sudah terpasang dan berjalan servicenya, dan siap untuk digunakan sebagai enviroment untuk applikasi web kita. *untuk referensi url_toolkit beberapa php cms dan framework bisa melihat sample ini disini: https://www.hiawatha-webserver.org/howto/url_rewrite_rules"}]}